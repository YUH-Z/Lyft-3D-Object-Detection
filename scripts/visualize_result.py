from lyft_dataset_sdk.lyftdataset import LyftDataset, LyftDatasetExplorer
from lyft_dataset_sdk.utils.data_classes import Box
import json
from pyquaternion import Quaternion
import matplotlib.pyplot as plt
import numpy as np

##########################################################
### Path of prediction JSON file
### .json file generated by `eval.py` in same directory

predict_path = '/home/naplings/src/model/lyft_all_pp_mida/eval_results/step_302400/predictions.json'
with open(predict_path, 'r') as f:
    predict = json.load(f)

pred_dict = {}
for record in predict:
    if record["score"] < 0.3: continue

    box = Box(
        record["translation"],
        record["size"],
        Quaternion(record["rotation"]),
        score=record["score"],
        name=record["name"],
    )

    if record['sample_token'] not in pred_dict:
        pred_dict[record['sample_token']] = [box]
    else:
        pred_dict[record['sample_token']].append(box)

print(len(pred_dict))

################################
### MODIFY THE DATASET PATH HERE
level5data = LyftDataset(data_path='/home/naplings/Datasets/lyft/train',
                        json_path='/home/naplings/Datasets/lyft/train/v1.0-trainval', verbose=True)
expo = LyftDatasetExplorer(level5data)

count = 0
total = len(pred_dict.items())
for token, test_frame in pred_dict.items():
    count += 1
    print(f'{count} / {total}')
    record = level5data.get("sample", token)

    radar_data = {}
    nonradar_data = {}
    for channel, token in record["data"].items():
        sd_record = level5data.get("sample_data", token)
        sensor_modality = sd_record["sensor_modality"]
        if sensor_modality in ["lidar", "camera"]:
            nonradar_data[channel] = token
        else:
            radar_data[channel] = token

    num_radar_plots = 1 if len(radar_data) > 0 else 0

    # Create plots.
    n = num_radar_plots + len(nonradar_data)
    cols = 2
    fig, axes = plt.subplots(int(np.ceil(n / cols)), cols, figsize=(16, 24))

    # Plot camera and lidar in separate subplots.
    for (_, sd_token), ax in zip(nonradar_data.items(), axes.flatten()[num_radar_plots:]):
        expo.render_sample_data_with_boxes(sd_token, test_frame, ax=ax)

    axes.flatten()[-1].axis("off")
    plt.tight_layout()
    fig.subplots_adjust(wspace=0, hspace=0)

    #########################
    ### Output directory Here
    
    plt.savefig(f'HigherThreImg30/{token}.png')
    plt.close("all")